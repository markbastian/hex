{:use-macros nil, :excludes #{cat * or keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {form {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 132, :column 7, :end-line 132, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, *recursion-limit* {:name cljs.spec/*recursion-limit*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 21, :column 1, :end-line 21, :end-column 33, :dynamic true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:name cljs.spec/*coll-error-limit*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 35, :column 1, :end-line 35, :end-column 34, :dynamic true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, t_cljs$spec81079 {:num-fields 15, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec81079, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 687, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec81068 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec81068, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 669, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, op-explain {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 955, :column 8, :end-line 955, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 955, :end-line 955, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, t_cljs$spec80916 {:num-fields 6, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80916, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 479, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec80875 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs req id p__80842 req-keys map__80873 opt-specs k->s pred-forms meta80876])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80875, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs req id p__80842 req-keys map__80873 opt-specs k->s pred-forms meta80876]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 397, :max-fixed-arity 20, :fn-var true, :arglists (quote ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs req id p__80842 req-keys map__80873 opt-specs k->s pred-forms meta80876])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 839, :column 19, :end-line 839, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 839, :end-line 839, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 598, :column 8, :end-line 598, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 598, :end-line 598, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, def-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 246, :column 19, :end-line 246, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, unstrument* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 345, :column 7, :end-line 345, :end-column 18, :arglists (quote ([v]))}, :name cljs.spec/unstrument*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, regex-spec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1082, :column 19, :end-line 1082, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1082, :end-line 1082, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, explain-data* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 167, :column 7, :end-line 167, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 906, :column 8, :end-line 906, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 906, :end-line 906, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 655, :column 8, :end-line 655, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 655, :end-line 655, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, ->t_cljs$spec80916 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta80917])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80916, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([form pred gfn cpred? unc meta80917]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 479, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta80917])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, MAX_INT {:name cljs.spec/MAX_INT, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}}, alt2 {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 837, :column 8, :end-line 837, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 837, :end-line 837, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, inst-in-range? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1199, :column 7, :end-line 1199, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1199, :end-line 1199, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 51, :column 1, :end-line 51, :end-column 32, :private true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 51, :column 20, :end-line 51, :end-column 32, :private true}}, accept? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 774, :column 8, :end-line 774, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p__81087]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 774, :end-line 774, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, ->t_cljs$spec80962 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta80963])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80962, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta80963]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 618, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta80963])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, and-spec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 666, :column 19, :end-line 666, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 666, :end-line 666, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 772, :column 8, :end-line 772, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 772, :end-line 772, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 355, :column 8, :end-line 355, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 49, :column 4, :end-line 49, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 389, :column 19, :end-line 389, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 32, :method-params ([p__80842]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, *instrument-enabled* {:meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 39, :column 26, :end-line 39, :end-column 46, :dynamic true, :private true}, :private true, :name cljs.spec/*instrument-enabled*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 46, :column 1, :dynamic true, :line 39, :end-line 39, :doc "if false, instrumented fns call straight through"}, reg-resolve! {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 77, :column 8, :end-line 77, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, instrumented-vars {:name cljs.spec/instrumented-vars, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 328, :column 1, :end-line 328, :end-column 33, :private true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 328, :column 16, :end-line 328, :end-column 33, :private true}, :doc "Map for instrumented vars to :raw/:wrapped fns"}, re-explain {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1058, :column 8, :end-line 1058, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1058, :end-line 1058, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, t_cljs$spec80931 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80931, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 509, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alts {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 836, :column 8, :end-line 836, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 836, :end-line 836, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, t_cljs$spec80875 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80875, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 397, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec81326 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec81326, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1130, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, with-name {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 55, :column 8, :end-line 55, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, ->t_cljs$spec81065 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta81066])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec81065, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta81066]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 669, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta81066])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 212, :column 7, :end-line 212, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 58, :column 8, :end-line 58, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 273, :column 1, :end-line 273, :end-column 18, :declared true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 273, :column 10, :end-line 273, :end-column 18, :declared true}}, with-gen* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 48, :column 4, :end-line 48, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, spec-checking-fn {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 287, :column 8, :end-line 287, :end-column 24, :private true, :arglists (quote ([v f]))}, :private true, :name cljs.spec/spec-checking-fn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 24, :method-params ([v f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v f]))}, ->t_cljs$spec81068 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta81069])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec81068, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta81069]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 669, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta81069])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, or-spec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 604, :column 19, :end-line 604, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 116, :column 8, :end-line 116, :end-column 15, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec/specize, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, *fspec-iterations* {:name cljs.spec/*fspec-iterations*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 27, :column 1, :end-line 27, :end-column 34, :dynamic true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 43, :column 14, :end-line 43, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :column 1, :line 43, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 43, :impls #{cljs.spec/t_cljs$spec80875 cljs.spec/t_cljs$spec80969 cljs.spec/t_cljs$spec81313 cljs.spec/t_cljs$spec80845 cljs.spec/t_cljs$spec81065 cljs.spec/t_cljs$spec80949 cljs.spec/t_cljs$spec81079 cljs.spec/t_cljs$spec81316 cljs.spec/t_cljs$spec80916 cljs.spec/t_cljs$spec81332 cljs.spec/t_cljs$spec81326 cljs.spec/t_cljs$spec81068 cljs.spec/t_cljs$spec80962 cljs.spec/t_cljs$spec80931}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 125, :column 7, :end-line 125, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec/unform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 375, :column 7, :end-line 375, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, coll-checker {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1178, :column 7, :end-line 1178, :end-column 19, :arglists (quote ([pred])), :doc "returns a predicate function that checks *coll-check-limit* items in a collection with pred"}, :name cljs.spec/coll-checker, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1178, :end-line 1178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred])), :doc "returns a predicate function that checks *coll-check-limit* items in a collection with pred"}, gen {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 233, :column 7, :end-line 233, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to\n  generators. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to\n  generators. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"}, t_cljs$spec80969 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80969, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 618, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec80949 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80949, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 4, :line 547, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 45, :column 4, :end-line 45, :end-column 11, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec/Spec, :name cljs.spec/unform*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ->sym {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 261, :column 8, :end-line 261, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec/->sym, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 138, :column 7, :end-line 138, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec/abbrev, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, ->t_cljs$spec80845 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs req map__80843 id p__80842 req-keys opt-specs k->s pred-forms meta80846])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80845, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs req map__80843 id p__80842 req-keys opt-specs k->s pred-forms meta80846]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 397, :max-fixed-arity 20, :fn-var true, :arglists (quote ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs req map__80843 id p__80842 req-keys opt-specs k->s pred-forms meta80846])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, regex? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 90, :column 7, :end-line 90, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec/regex?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, no-fn-spec {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 323, :column 8, :end-line 323, :end-column 18, :private true, :arglists (quote ([v specs]))}, :private true, :name cljs.spec/no-fn-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([v specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v specs]))}, expect {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 277, :column 8, :end-line 277, :end-column 14, :private true, :arglists (quote ([spec v])), :doc "Returns nil if v conforms to spec, else throws ex-info with explain-data."}, :private true, :name cljs.spec/expect, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec v])), :doc "Returns nil if v conforms to spec, else throws ex-info with explain-data."}, t_cljs$spec81313 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec81313, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 1085, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec80949 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta80950])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80949, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([forms preds gfn meta80950]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 547, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta80950])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, int-in-range? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1206, :column 7, :end-line 1206, :end-column 20, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, :name cljs.spec/int-in-range?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([start end val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1206, :end-line 1206, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, dt {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 362, :column 8, :end-line 362, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/dt, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, preturn {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 870, :column 8, :end-line 870, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/preturn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 870, :end-line 870, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, re-conform {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1045, :column 8, :end-line 1045, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec/re-conform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([p p__81281]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1045, :end-line 1045, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 85, :column 7, :end-line 85, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec/spec?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, named? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 53, :column 8, :end-line 53, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/named?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, registry {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 256, :column 7, :end-line 256, :end-column 15, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, :name cljs.spec/registry, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, rep+impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 805, :column 19, :end-line 805, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec/rep+impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 805, :end-line 805, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, ->t_cljs$spec81079 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form map__81077 max-count p__81076 check? gfn gen-max pred distinct kfn gen-into count min-count opts meta81080])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec81079, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([form map__81077 max-count p__81076 check? gfn gen-max pred distinct kfn gen-into count min-count opts meta81080]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 687, :max-fixed-arity 15, :fn-var true, :arglists (quote ([form map__81077 max-count p__81076 check? gfn gen-max pred distinct kfn gen-into count min-count opts meta81080])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, deriv {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 919, :column 8, :end-line 919, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/deriv, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 919, :end-line 919, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, ->t_cljs$spec81332 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta81333])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec81332, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta81333]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1130, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta81333])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, t_cljs$spec81316 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec81316, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 1085, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, exercise {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1169, :column 7, :end-line 1169, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec/exercise, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1169, :end-line 1169, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, t_cljs$spec80962 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80962, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 618, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-data {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 171, :column 7, :end-line 171, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a path->problem-map, where problem-map has at least :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec/explain-data, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a path->problem-map, where problem-map has at least :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, tuple-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 543, :column 19, :end-line 543, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/tuple-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 543, :end-line 543, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, instrument* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 332, :column 7, :end-line 332, :end-column 18, :arglists (quote ([v]))}, :name cljs.spec/instrument*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, multi-spec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 496, :column 19, :end-line 496, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/multi-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 496, :end-line 496, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, conform {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 119, :column 7, :end-line 119, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec/conform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, gen* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 47, :column 4, :end-line 47, :end-column 8, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec/Spec, :name cljs.spec/gen*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 47, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, fspec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1126, :column 19, :end-line 1126, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec/fspec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1126, :end-line 1126, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, fn-spec? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 282, :column 8, :end-line 282, :end-column 16, :private true, :arglists (quote ([m])), :doc "Fn-spec must include at least :args or :ret specs."}, :private true, :name cljs.spec/fn-spec?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Fn-spec must include at least :args or :ret specs."}, inck {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 359, :column 8, :end-line 359, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec/inck, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, *coll-check-limit* {:name cljs.spec/*coll-check-limit*, :file "resources/public/js/compiled/out/cljs/spec.cljs", :line 31, :column 1, :end-line 31, :end-column 34, :dynamic true, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 31, :column 16, :end-line 31, :end-column 34, :dynamic true}, :doc "The number of items validated in a collection spec'ed with 'every'"}, ->t_cljs$spec81326 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta81327])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec81326, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta81327]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1130, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta81327])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, get-spec {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 268, :column 7, :end-line 268, :end-column 15, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, :name cljs.spec/get-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, gensub {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 224, :column 8, :end-line 224, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec/gensub, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, the-spec {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 109, :column 8, :end-line 109, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec/the-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, every-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 678, :column 19, :end-line 678, :end-column 29, :skip-wiki true, :arglists (quote ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn])), :doc "Do not call this directly, use 'every'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/every-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}, :method-params ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 678, :end-line 678, :max-fixed-arity 4, :fn-var true, :arglists ([form pred opts] [form pred {:keys [count max-count min-count distinct gen-max gen-into :cljs.spec/kfn], :or {gen-max 20, gen-into []}, :as opts} gfn]), :doc "Do not call this directly, use 'every'"}, accept-nil? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 855, :column 8, :end-line 855, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/accept-nil?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 855, :end-line 855, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, t_cljs$spec81332 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec81332, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1130, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, maybe-spec {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 98, :column 8, :end-line 98, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec/maybe-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, spec-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 470, :column 19, :end-line 470, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?] [form pred gfn cpred? unc])), :doc "Do not call this directly, use 'spec'", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}}, :name cljs.spec/spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 5, :fn-var true, :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :doc "Do not call this directly, use 'spec'"}, coll-gen {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1188, :column 7, :end-line 1188, :end-column 15, :arglists (quote ([pred init-coll])), :doc "returns a function of no args that returns a generator of\n  collections of items conforming to pred, with the same shape as\n  init-coll"}, :name cljs.spec/coll-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([pred init-coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1188, :end-line 1188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred init-coll])), :doc "returns a function of no args that returns a generator of\n  collections of items conforming to pred, with the same shape as\n  init-coll"}, t_cljs$spec81065 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec81065, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 669, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec80969 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta80970])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80969, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta80970]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 618, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta80970])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, amp-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 810, :column 19, :end-line 810, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec/amp-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 810, :end-line 810, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 777, :column 8, :end-line 777, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec/pcat*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([p__81092]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 777, :end-line 777, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, ->t_cljs$spec81316 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta81317])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec81316, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta81317]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1085, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta81317])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 824, :column 8, :end-line 824, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec/alt*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 824, :end-line 824, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 789, :column 19, :end-line 789, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec/cat-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 789, :end-line 789, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, macroexpand-check {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 310, :column 8, :end-line 310, :end-column 25, :private true, :arglists (quote ([v args]))}, :private true, :name cljs.spec/macroexpand-check, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 25, :method-params ([v args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v args]))}, reg-resolve {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 65, :column 8, :end-line 65, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, :private true, :name cljs.spec/reg-resolve, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, explain-str {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 217, :column 7, :end-line 217, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec/explain-str, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, with-gen {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 162, :column 7, :end-line 162, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec/with-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, conform* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 44, :column 4, :end-line 44, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec/Spec, :name cljs.spec/conform*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, noret? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 847, :column 8, :end-line 847, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec/noret?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 847, :end-line 847, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 801, :column 19, :end-line 801, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec/rep-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 801, :end-line 801, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, op-describe {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 939, :column 8, :end-line 939, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/op-describe, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 939, :end-line 939, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, describe {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 157, :column 7, :end-line 157, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec/describe, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 382, :column 8, :end-line 382, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec/explain-1, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 180, :column 7, :end-line 180, :end-column 18, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, :name cljs.spec/explain-out, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, re-gen {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1009, :column 8, :end-line 1009, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec/re-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1009, :end-line 1009, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, filter-alt {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 815, :column 8, :end-line 815, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec/filter-alt, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 815, :end-line 815, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, and-preds {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 643, :column 8, :end-line 643, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec/and-preds, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 643, :end-line 643, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, call-valid? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1105, :column 8, :end-line 1105, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec/call-valid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1105, :end-line 1105, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, op-unform {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 885, :column 8, :end-line 885, :end-column 17, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/op-unform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 885, :end-line 885, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, rep* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 794, :column 8, :end-line 794, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec/rep*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 794, :end-line 794, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, t_cljs$spec80845 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec80845, :file "resources/public/js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 397, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, maybe-impl {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 843, :column 19, :end-line 843, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec/maybe-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 843, :end-line 843, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, pcat {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 787, :column 8, :end-line 787, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/pcat, :variadic true, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 787, :end-line 787, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 46, :column 4, :end-line 46, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec/Spec, :name cljs.spec/explain*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 46, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, ->t_cljs$spec80931 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta80932])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec80931, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta80932]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 509, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta80932])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, validate-fn {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/hex/resources/public/js/compiled/out/cljs/spec.cljs", :line 1116, :column 8, :end-line 1116, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec/validate-fn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1116, :end-line 1116, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, ->t_cljs$spec81313 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta81314])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec81313, :variadic false, :file "resources/public/js/compiled/out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta81314]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1085, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta81314])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag map__81077 max-count :args :max-tries :req-un :opt-un cljs.spec/keys meta81066 unc :cljs.spec/invalid cljs.spec/spec :p2 :ret p__81076 :gfn meta80970 :pred-exprs meta80950 vector? :gen-max map :shrunk :fn regex-spec-impl predx :rep+ meta80963 meta81317 :cljs.spec/amp cljs.core/= :opt-keys aform :pred dval :splice and-spec-impl check? forms opt argspec meta81080 :else :gen :cljs.spec/k map-spec-impl :ks cljs.core/count p1__81343# req-un opt-un :cljs.spec/args :_ :maybe :raw :via :cljs.spec/kfn :as zipmap :req-specs gfn gen-max fnspec cljs.spec/multi-spec v map? pred-exprs keys-pred cpred? or-spec-impl meta81069 argm fn :val fform opt-keys pred :cljs.spec/alt :skip-wiki :p1 cljs.core/zipmap :cljs.spec/nil % :cljs.spec/pcat cljs.core/map cljs.spec/conformer method :distinct cljs.spec/? req-specs cljs.spec/* re kps :reason preds cljs.spec/+ :req cljs.core/constantly :cljs.spec/name :gen-into :cljs.spec/unknown :keys :cljs.spec/recursion-limit meta80846 meta81333 :var fn* cljs.core/<= cljs.spec/alt :id fspec-impl :min-count :cljs.spec/rep :smallest :specs :count keys->specs mmvar :req-keys retag k cljs.core/fn distinct meta80876 cljs.spec/% :cljs.spec/any retspec :cljs.spec/accept :opt-specs cljs.spec/and cljs.spec/cat rform ifn? :pred-forms req js/Number.MAX_SAFE_INTEGER cljs.spec/every keys distinct? :max-count cljs.spec/or kfn :max-elements gen-into quote :arglists map__80843 id :num-elements cljs.spec/fspec :doc specs cljs.spec/tuple count p__80842 req-keys apply :cljs.spec/op min-count map__80873 opts :cljs.spec/v cform meta80932 :min-elements p1__81344# :wrapped clojure.spec/& opt-specs meta81327 :cljs.spec/problems :forms :ps k->s seqable? :cljs.spec/kvs->map :in meta81314 :accept :opt cljs.spec.impl.gen/any pred-forms meta80917}, :order [:cljs.spec/name :cljs.spec/op :cljs.spec/unknown fn % :else :cljs.spec/problems :pred :val :reason :via :in :cljs.spec/recursion-limit :args :ret :cljs.spec/invalid :cljs.spec/args :var :specs :raw :wrapped :opt :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys opt map-spec-impl :skip-wiki :arglists :doc quote :keys :as req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms gfn argm keys-pred keys->specs map__80843 id p__80842 k->s meta80846 map__80873 meta80876 form pred cpred? unc meta80917 method cljs.spec/multi-spec mmvar retag predx dval tag meta80932 vector? cljs.core/= cljs.core/count cljs.spec/tuple forms preds meta80950 cljs.spec/or or-spec-impl keys kps cform meta80963 meta80970 cljs.spec/and and-spec-impl meta81066 meta81069 :count :max-count :min-count :distinct :gen-max :gen-into :cljs.spec/kfn seqable? distinct? cljs.spec/% cljs.core/<= js/Number.MAX_SAFE_INTEGER :num-elements :max-tries :min-elements :max-elements cljs.spec/every map__81077 max-count p__81076 check? gen-max distinct kfn gen-into count min-count opts meta81080 :cljs.spec/accept :ps :ks :forms :rep+ :cljs.spec/pcat :p2 :splice :id :cljs.spec/rep :p1 cljs.spec/* :cljs.spec/amp :cljs.spec/alt :cljs.spec/nil :maybe clojure.spec/& cljs.spec/+ cljs.spec/cat :_ cljs.spec/? cljs.spec/alt :accept regex-spec-impl re meta81314 meta81317 :fn :smallest :shrunk apply ifn? cljs.spec/fspec fspec-impl argspec aform retspec rform fnspec fform specs meta81327 meta81333 :cljs.spec/any cljs.spec/spec cljs.core/constantly :gen cljs.spec.impl.gen/any :cljs.spec/kvs->map cljs.spec/conformer fn* p1__81343# cljs.core/zipmap cljs.core/map :cljs.spec/k :cljs.spec/v p1__81344# cljs.core/fn k v zipmap map]}, :doc nil}